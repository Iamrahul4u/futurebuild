// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod" // default is ./generated/zod
  createOptionalDefaultValuesTypes = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model JobPost {
  id               String         @id @unique @default(cuid())
  jobTitle         String
  jobDescription   String
  organisationName String
  modeOfWork       mode?
  minExperience    Int            @default(0)
  maxExperience    Int
  minSalary        Int            @default(0)
  maxSalary        Int
  skills           Skill[]
  perks            Perk[]
  jobType          JobType        @default(Full_Time)
  postedAt         DateTime       @default(now())
  whoCanApply      ExperienceEnum @default(Anyone)
  applicants       Applicant[]
  postedBy         User           @relation("PostedJobs", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model Applicant {
  id             String         @id @unique @default(cuid())
  userId         String
  coverLetter    String
  availability   String
  approvalStatus ApprovalStatus @default(Pending)
  resume         Media?
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId          String
  jobPost        JobPost        @relation(fields: [jobId], references: [id])
}

enum ApprovalStatus {
  Pending
  Rejected
  Accepted
}

model User {
  id             String      @id @unique @default(cuid())
  username       String
  firstName      String /// @zod.string.min(3, { message: "Enter more than 3 characters" }).max(15, { message: "Enter Less than 15 characters" })
  secondName     String /// @zod.string.min(3, { message: "Enter more than 3 characters" }).max(15, { message: "Enter Less than 15 characters" })
  email          String      @unique
  hashedPassword String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  role           Role        @default(USER)
  skills         Skill[]
  locationId     String?
  media          Media[]
  address        Location?   @relation(fields: [locationId], references: [id])
  postedJobs     JobPost[]   @relation("PostedJobs")
  appliedJobs    Applicant[]
  sessions       Session[]
}

model Skill {
  id        String   @id @unique @default(cuid())
  name      String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  JobPost   JobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId String?
}

model Perk {
  id        String   @id @unique @default(cuid())
  name      String
  JobPost   JobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId String?
}

model Media {
  id          String     @id @unique @default(cuid())
  mediaType   String
  url         String
  mediaName   String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicantId String?    @unique
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
}

model Session {
  id        String   @id @unique @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Location {
  id          String  @id @unique @default(cuid())
  address     String? /// @zod.string.min(3, { message: "Enter more than 3 characters" }).max(15, { message: "Enter Less than 15 characters" })
  postalCode  Int
  state       String /// @zod.string.min(3, { message: "Enter more than 3 characters" }).max(15, { message: "Enter Less than 15 characters" })
  city        String /// @zod.string.min(3, { message: "Enter more than 3 characters" }).max(15, { message: "Enter Less than 15 characters" })
  phoneNumber Int
  User        User[]
}

model JobProfile {
  id             String @id @unique @default(cuid())
  jobProfileName String
}

enum mode {
  Remote
  Hybrid
}

enum Role {
  ADMIN
  USER
  ORGANIZATION
}

enum ExperienceEnum {
  Anyone
  Fresher
  Intermediate
  Experienced
}

enum JobType {
  Full_Time
  Part_Time
  InternShip
  Project_Work
  Volunteering
}

enum MediaName {
  Resume
  Profile_Img
}
